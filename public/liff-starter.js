// DO NOT CHANGE THIS
let PROFILE = null;

window.onload = function () {
    const useNodeJS = true;   // if you are not using a node server, set this value to false
    const defaultLiffId = "";   // change the default LIFF value if you are not using a node server

    // DO NOT CHANGE THIS
    let myLiffId = "";

    // if node is used, fetch the environment variable and pass it to the LIFF method
    // otherwise, pass defaultLiffId
    if (useNodeJS) {
        fetch('/send-id')
            .then(function (reqResponse) {
                return reqResponse.json();
            })
            .then(function (jsonResponse) {
                myLiffId = jsonResponse.id;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function (error) {
                console.error(error)
            });
    } else {
        myLiffId = defaultLiffId;
        initializeLiffOrDie(myLiffId);
    }
};

/**
* Check if myLiffId is null. If null do not initiate liff.
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (myLiffId) {
        initializeLiff(myLiffId);
    } else {
        console.error('please set your liff Id in application!')
    }
}

/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api
            initializeApp();
        })
        .catch((err) => {
            console.log(err)
        });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
    displayLiffData();
    registerButtonHandlers();
    // check if the user is logged in/out, and disable inappropriate button
    if (liff.isLoggedIn()) {
        displayIsInClientInfo();
        document.getElementById('liffLoginButton').disabled = true;
    } else {
        document.getElementById('liffLogoutButton').disabled = true;
        document.getElementById('shareMeTargetPicker').disabled = true;
    }
}

/**
* Display data generated by invoking LIFF methods
*/
function displayLiffData() {
    liff.getProfile()
        .then((result) => {
            PROFILE = result;
            document.getElementById('profileName').textContent = 'Hi, ' + result.displayName;
        })
    document.getElementById('isInClient').textContent = liff.isInClient();
    document.getElementById('isLoggedIn').textContent = liff.isLoggedIn();
}

/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/
function displayIsInClientInfo() {
    if (liff.isInClient()) {
        document.getElementById('liffLoginButton').classList.toggle('hidden');
        document.getElementById('liffLogoutButton').classList.toggle('hidden');
        document.getElementById('isInClient').textContent = 'You are opening the app in the in-app browser of LINE.';
    } else {
        document.getElementById('shareMeTargetPicker').classList.toggle('hidden');
    }
}

/**
* Register event handlers for the buttons displayed in the app
*/
function registerButtonHandlers() {
    document.getElementById('shareMeTargetPicker').addEventListener('click', function () {
        if (liff.isApiAvailable('shareTargetPicker')) {
            liff.shareTargetPicker([{
                'type': 'text',
                'text': 'Hello, I am ' + PROFILE.displayName
            }, {
                'type': 'image',
                'originalContentUrl': PROFILE.pictureUrl,
                'previewImageUrl': PROFILE.pictureUrl
            }]).then(function (res) {
                if (res) alert('Message sent!');
            }).catch(function (res) {
                console.error(res);
            });
        }
    });

    // login call, only when external browser is used
    document.getElementById('liffLoginButton').addEventListener('click', function () {
        if (!liff.isLoggedIn()) {
            liff.login();           
        }
    });

    // logout call only when external browse
    document.getElementById('liffLogoutButton').addEventListener('click', function () {
        if (liff.isLoggedIn()) {
            liff.logout();
            window.location.reload();
        }
    });

    // document.getElementById('previewImage').addEventListener('click', function () {
    //     document.getElementById('memeImage').src = document.getElementById('inputImageUrl').value;
    // });

    // document.getElementById('topText').addEventListener('keyup', function (event) {
    //     document.getElementById('memeTopCaption').textContent = event.target.value;
    // });

    // document.getElementById('bottomText').addEventListener('keyup', function (event) {
    //     document.getElementById('memeBottomCaption').textContent = event.target.value;
    // });

    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }
    
    class Pool{
        constructor(category, cg_remain_num){
            this.category = category;
            this.cg_remain_num = cg_remain_num;
            this.num = Pool.total_pool_num(cg_remain_num);
            this.map = new Map();
        }
        static total_pool_num(cg_remain_num){
            var num = 0;
            for(var i = 0 ; i < cg_remain_num.length ; i++){
                num += cg_remain_num[i];
            }
            return num;
        }
    }
    var category = ["wolfman","Villager","Prophet"];
    var cg_remain_num = [1,3,1];
    main_pool = new Pool(category,cg_remain_num);
    document.getElementById('drawCard').addEventListener('click', function (event) {
        var userid = PROFILE.userId;
        var playerclass = main_pool.map[userid];
        while(playerclass == undefined && main_pool.num >= 0){
            i = getRandomInt(main_pool.category.length)
            if(main_pool.cg_remain_num[i] != 0){
                main_pool.cg_remain_num[i] -= 1;
                main_pool.num -= 1;
                playerclass = main_pool.category[i];
                main_pool.map[userid] = playerclass;
            }
        }
        cls_e = document.getElementById('UserClass');
        cls_e.innerHTML = playerclass;
    });

    document.getElementById('shareMeme').addEventListener('click', function (event) {
        if (!liff.isLoggedIn()) alert('please login in LINE');

        const imageUrl = document.getElementById('memeImage').src;
        const topText = document.getElementById('memeTopCaption').textContent || ' ';
        const bottomText = document.getElementById('memeBottomCaption').textContent || ' ';
        const url = window.location.href;
        liff.shareTargetPicker([{
            'type': 'flex',
            'altText': topText + ' ' + bottomText,
            'contents': {
                "type": "bubble",
                "hero": {
                  "type": "image",
                  "url": imageUrl,
                  "size": "full",
                  "aspectRatio": "20:13",
                  "aspectMode": "cover",
                  "action": {
                    "type": "uri",
                    "uri": "http://linecorp.com/"
                  }
                },
                "body": {
                  "type": "box",
                  "layout": "vertical",
                  "contents": [
                    {
                      "type": "text",
                      "text": topText,
                      "weight": "bold",
                      "size": "xl"
                    }
                  ]
                },
                "footer": {
                  "type": "box",
                  "layout": "vertical",
                  "spacing": "sm",
                  "contents": [
                    {
                      "type": "button",
                      "style": "link",
                      "height": "sm",
                      "action": {
                        "type": "uri",
                        "label": "WEBSITE",
                        "uri": "https://lineworkshoptu.herokuapp.com/#"
                      }
                    },
                    {
                      "type": "spacer",
                      "size": "sm"
                    }
                  ],
                  "flex": 0
                }
              }
          }]).then(function (res) {
            if (res) alert('Message sent!');
        }).catch(function (res) {
            console.error(res);
        });
    });
}

/**
* Toggle specified element
* @param {string} elementId The ID of the selected element
*/
function toggleElement(elementId) {
    const elem = document.getElementById(elementId);
    if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {
        elem.style.display = 'none';
    } else {
        elem.style.display = 'block';
    }
}